#!/bin/bash

PRODUCT_DIR={{PRODUCT_DIR}}

#/grafana/bin/grafana-server
# Process name ( For display )
NAME=grafana-server

# Daemon name, where is the actual executable If the daemon is not
# there, then exit.
DAEMON=$PRODUCT_DIR/grafana/bin/grafana-server
if [ ! -x $DAEMON ]; then
    echo "Executable $DAEMON does not exist!"
    exit 5
fi

# Logging
LOGDIR=$PRODUCT_DIR/grafana/data/log
if [ ! -d "$LOGDIR" ]; then
    mkdir -p $LOGDIR
fi
STDOUT=$LOGDIR/server-start-out.log
STDERR=$LOGDIR/server-start-err.log

# PID file for the daemon
PIDFILE=$PRODUCT_DIR/grafana/data/grafana-server.pid
PIDDIR=`dirname $PIDFILE`
if [ ! -d "$PIDDIR" ]; then
    mkdir -p $PIDDIR
fi

# Daemon options
GRAFANA_OPTS="--config=$PRODUCT_DIR/grafana/conf/grafana.ini \
  --homepath=$PRODUCT_DIR/grafana \
  --pidfile=$PIDFILE \
  --packaging=rpm cfg:default.paths.logs=$LOGDIR \
  cfg:default.paths.data=$PRODUCT_DIR/grafana/data \
  cfg:default.paths.plugins=$PRODUCT_DIR/grafana/data/plugins \
  cfg:default.paths.provisioning=$PRODUCT_DIR/grafana/conf/provisioning \
  "
function log_failure_msg() {
    echo "$@" "[ FAILED ]"
}

function log_success_msg() {
    echo "$@" "[ OK ]"
}

function start() {
    # Check that the PID file exists, and check the actual status of process
    if [ -f $PIDFILE ]; then
        PID="$(cat $PIDFILE)"
        if kill -0 "$PID" &>/dev/null; then
            # Process is already up
            log_success_msg "$NAME process is already running"
            return 0
        fi
    else
        touch $PIDFILE >/dev/null
        if [ $? -ne 0 ]; then
            log_failure_msg "$PIDFILE not writable, check permissions"
            exit 5
        fi
    fi

    # Launch process
    echo "Starting $NAME..."
    # Uncomment this to write start errors to grafana-server-start.log
    # $DAEMON $GRAFANA_OPTS >>$STDOUT 2>>$STDERR &
    $DAEMON $GRAFANA_OPTS  >/dev/null 2>&1 &

    n=0
    while true; do
      if [ -f $PIDFILE ]; then
          # PIDFILE exists
          if kill -0 $(cat $PIDFILE) &>/dev/null; then
              # PID up, service running
              log_success_msg "$NAME process was started"
              return 0
          fi
      fi
      sleep 1
      n=$(expr $n + 1)
      if [ $n -gt 30 ]; then break; fi
    done
    log_failure_msg "$NAME process was unable to start"
    exit 1
}

function stop() {
    # Stop the daemon.
    if [ -f $PIDFILE ]; then
        local PID="$(cat $PIDFILE)"
        if kill -0 $PID &>/dev/null; then
            echo "Stopping $NAME..."
            # Process still up, send SIGTERM and remove PIDFILE
            kill -s TERM $PID &>/dev/null # && rm -f "$PIDFILE" &>/dev/null
            n=0
            while true; do
                # Enter loop to ensure process is stopped
                kill -0 $PID &>/dev/null
                if [ "$?" != "0" ]; then
                    # Process stopped, break from loop
                    log_success_msg "$NAME process was stopped"
                    return 0
                fi

                # Process still up after signal, sleep and wait
                sleep 1
                n=$(expr $n + 1)
                if [ $n -eq 30 ]; then
                    # After 30 seconds, send SIGKILL
                    echo "Timeout exceeded, sending SIGKILL..."
                    kill -s KILL $PID &>/dev/null && rm -f "$PIDFILE" &>/dev/null
                elif [ $? -eq 40 ]; then
                    # After 40 seconds, error out
                    log_failure_msg "could not stop $NAME process"
                    exit 1
                fi
            done
        fi
    fi
    log_success_msg "$NAME process already stopped"
}

function restart() {
    # Restart the daemon.
    stop
    start
}

function status() {
    # Check the status of the process.
    if [ -f $PIDFILE ]; then
        PID="$(cat $PIDFILE)"
        if kill -0 $PID &>/dev/null; then
            log_success_msg "$NAME process is running"
            exit 0
        fi
    fi
    log_failure_msg "$NAME process is not running"
    exit 1
}

case $1 in
    start)
        start
        ;;

    stop)
        stop
        ;;

    restart)
        restart
        ;;

    status)
        status
        ;;

    version)
        $DAEMON version
        ;;

    *)
        # For invalid arguments, print the usage message.
        echo "Usage: $0 {start|stop|restart|status|version}"
        exit 2
        ;;
esac
