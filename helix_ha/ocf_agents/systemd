#!/bin/bash
#
#
# Systemd OCF wrapper.
#######################################################################
# Initialization:
# OCF_ROOT=/usr/lib/ocf

: ${OCF_FUNCTIONS=${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs}
. ${OCF_FUNCTIONS}
: ${__OCF_ACTION=$1}
: ${OCF_RESKEY_unitname=$2}
SYSTEMCTL="/usr/bin/systemctl"
#######################################################################

meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="systemd" version="1.0">
<version>1.0</version>

<longdesc lang="en">
This is a Systemd Resource Agent. Just a wrapper for systemctl command.
</longdesc>
<shortdesc lang="en">OCF Systemd Resource Agent</shortdesc>

<parameters>
  <parameter name="unitname" unique="1" required="1">
    <longdesc lang="en">
      Systemd unit name to be executed.
    </longdesc>
    <shortdesc lang="en">Unit</shortdesc>
    <content type="string" default="" />
  </parameter>
</parameters>

<actions>
<action name="start"        timeout="60s" />
<action name="stop"         timeout="60s" />
<action name="monitor"      timeout="60s" interval="60s" depth="0"/>
</actions>
</resource-agent>
END
}

#######################################################################

systemd_usage() {
    cat <<END
usage: $0 {start|stop|monitor|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
}

systemd_start() {
    ${SYSTEMCTL} start ${OCF_RESKEY_unitname}
    return $?
}

systemd_stop() {
    ${SYSTEMCTL} stop ${OCF_RESKEY_unitname}
    return $?
}

systemd_monitor() {
    # Monitor _MUST!_ differentiate correctly between running
    # (SUCCESS), failed (ERROR) or _cleanly_ stopped (NOT RUNNING).
    # That is THREE states, not just yes/no.
    local STATE
    STATE=`${SYSTEMCTL} is-active ${OCF_RESKEY_unitname}`
    case $STATE in
	active)         exit $OCF_SUCCESS
			;;
	failed)         exit $OCF_ERR_GENERIC
			;;
	*)              exit $OCF_NOT_RUNNING
	                ;;
esac

}

systemd_validate() {
    return $OCF_SUCCESS
}

case $__OCF_ACTION in
meta-data)      meta_data
                exit $OCF_SUCCESS
                ;;
start)          systemd_start;;
stop)           systemd_stop;;
monitor)        systemd_monitor;;
validate-all)   systemd_validate;;
usage|help)     systemd_usage
                exit $OCF_SUCCESS
                ;;
*)              systemd_usage
                exit $OCF_ERR_UNIMPLEMENTED
                ;;
esac
rc=$?
ocf_log debug "${OCF_RESOURCE_INSTANCE} $__OCF_ACTION : $rc"
exit $rc
